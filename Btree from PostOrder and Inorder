class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int val){
        this.val=val;
       
        this.left=null;
         this.right=null;
    }
}
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer,Integer>map=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);

        }
        TreeNode root=helper(inorder,0,inorder.length-1,postorder,0,postorder.length-1,map);
        return root;

        
    }
    public TreeNode helper(int inorder[],int inStart,int inEnd,int postorder[],int postStart,int postEnd,Map<Integer,Integer>map){
        if(postStart>postEnd || inStart>inEnd){
            return null;
        }
        TreeNode root=new TreeNode(postorder[postEnd]);
        int inroot=map.get(root.val);
        int numsleft=inroot-inStart;
        root.left=helper(inorder,inStart,inroot-1,postorder,postStart,postStart+numsleft-1,map);
        root.right=helper(inorder,inroot+1,inEnd,postorder,postStart+numsleft,postEnd-1,map);
        return root;
    }
}
