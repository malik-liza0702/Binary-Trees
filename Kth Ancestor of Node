import java.util.*;
class BinaryTreeNode<T> {
	   T data;
	   BinaryTreeNode<T> left;
	   BinaryTreeNode<T> right;
	   
	   public BinaryTreeNode(T data) {
		   this.data = data;
	   }
}
class HelloWorld {
    public static int findKthAncestor(BinaryTreeNode<Integer> root, int targetNodeVal, int k,int n) {
       int ancestors[]=new int[n+1];
       getAncestors(root,ancestors);
       int count=0;
       while(targetNodeVal!=-1){
           targetNodeVal=ancestors[targetNodeVal];
           count++;
           if(count==k){
               break;
           }
       }
       return targetNodeVal;

    }
    public static void getAncestors(BinaryTreeNode<Integer> root,int ancestors[]){
        ancestors[root.data]=-1;
        Queue<BinaryTreeNode<Integer>>q=new LinkedList<BinaryTreeNode<Integer>>();
        q.add(root);
        while(!q.isEmpty()){
            BinaryTreeNode<Integer> node=q.peek();
            q.remove();
            if(node.left!=null){
                ancestors[node.left.data]=node.data;
                q.add(node.left);
            }
            if(node.right!=null){
                 ancestors[node.right.data]=node.data;
                 q.add(node.right);
            }
            
        }

    }
    public static void main(String[] args) {
       BinaryTreeNode<Integer>root=new BinaryTreeNode<Integer>(1);
       root.left=new BinaryTreeNode<Integer>(2);
       root.right=new BinaryTreeNode<Integer>(3);
       root.left.left=new BinaryTreeNode<Integer>(4);
       root.left.right=new BinaryTreeNode<Integer>(5);
       root.left.left.left=new BinaryTreeNode<Integer>(7);
       root.left.right.left=new BinaryTreeNode<Integer>(8);
       root.left.right.right=new BinaryTreeNode<Integer>(9);
       root.right.right=new BinaryTreeNode<Integer>(6);
       root.right.right.right=new BinaryTreeNode<Integer>(10);
       int ancestor=findKthAncestor(root,7,2,10);
       System.out.println(ancestor);
       
       
       
       
       
       
       
    }
}
