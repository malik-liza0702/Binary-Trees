import java.util.*;
 class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
  }

class HelloWorld {
   public static List<Integer> distancek(TreeNode root,TreeNode target,int k){
       Map<TreeNode,TreeNode>parent=new HashMap<>();
       markParent(root,parent);
      Map<TreeNode,Boolean>visited=new HashMap<>();
       Queue<TreeNode>q=new LinkedList<>();
       q.add(target);
       visited.put(target,true);
       List<Integer>list=new ArrayList<>();
       int currLevel=0;
       while(!q.isEmpty()){
           int size=q.size();
           if(currLevel==k){
               break;
           }
               
           
           currLevel+=1;
           for(int i=0;i<size;i++){
               TreeNode curr=q.poll();
               if(curr.left!=null && visited.get(curr.left)==null){
                   visited.put(curr.left,true);
                   q.add(curr.left);
               }
               if(curr.right!=null && visited.get(curr.right)==null){
                    visited.put(curr.right,true);
                   q.add(curr.right);
               }
               if(parent.get(curr)!=null && visited.get(parent.get(curr))==null){
                    visited.put(parent.get(curr),true);
                   q.add(parent.get(curr));
               }
           }
       }
       while(!q.isEmpty()){
           TreeNode current=q.poll();
           list.add(current.val);
       }
       return list;
   }
   public static  void markParent(TreeNode root,Map<TreeNode,TreeNode>parent){
       Queue<TreeNode>q=new LinkedList<>();
       q.add(root);
       while(!q.isEmpty()){
           TreeNode node=q.poll();
           if(node.left!=null){
               parent.put(node.left,node);
               q.add(node.left);
           }
           if(node.right!=null){
               parent.put(node.right,node);
               q.add(node.right);
           }
       }
   }
    public static void main(String[] args) {
        TreeNode root=new TreeNode(1);
        root.left=new TreeNode(5);
        root.right=new TreeNode(1);
         root.left.left=new TreeNode(6);
         root.left.right=new TreeNode(2);
         root.left.right.left=new TreeNode(7);
        root.left.right.right=new TreeNode(4);
         root.right.left=new TreeNode(0);
         root.right.right=new TreeNode(8);
            
         
         List<Integer>list=new ArrayList<>();
         list=distancek(root,root.left,2);
         for(int i=0;i<list.size();i++){
             System.out.print(list.get(i)+" ");
         }
        
    
    }
}
